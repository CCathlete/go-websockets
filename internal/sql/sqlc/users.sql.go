// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
)

const deleteUser = `-- name: DeleteUser :exec
   update users
      set user_active = false,
          deleted_at = now()
    where id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
   select id, first_name, last_name, user_active, access_level, email, password_hash, deleted_at, created_at, updated_at,
          deleted_at is null as is_deleted
     from users
    where email = $1
`

type GetUserByEmailRow struct {
	ID           int32        `json:"id"`
	FirstName    string       `json:"first_name"`
	LastName     string       `json:"last_name"`
	UserActive   bool         `json:"user_active"`
	AccessLevel  int32        `json:"access_level"`
	Email        string       `json:"email"`
	PasswordHash string       `json:"password_hash"`
	DeletedAt    sql.NullTime `json:"deleted_at"`
	CreatedAt    sql.NullTime `json:"created_at"`
	UpdatedAt    sql.NullTime `json:"updated_at"`
	IsDeleted    interface{}  `json:"is_deleted"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.UserActive,
		&i.AccessLevel,
		&i.Email,
		&i.PasswordHash,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
   select id, first_name, last_name, user_active, access_level, email, password_hash, deleted_at, created_at, updated_at,
          deleted_at is null as is_deleted
     from users
    where id = $1
`

type GetUserByIDRow struct {
	ID           int32        `json:"id"`
	FirstName    string       `json:"first_name"`
	LastName     string       `json:"last_name"`
	UserActive   bool         `json:"user_active"`
	AccessLevel  int32        `json:"access_level"`
	Email        string       `json:"email"`
	PasswordHash string       `json:"password_hash"`
	DeletedAt    sql.NullTime `json:"deleted_at"`
	CreatedAt    sql.NullTime `json:"created_at"`
	UpdatedAt    sql.NullTime `json:"updated_at"`
	IsDeleted    interface{}  `json:"is_deleted"`
}

func (q *Queries) GetUserByID(ctx context.Context, id int32) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.UserActive,
		&i.AccessLevel,
		&i.Email,
		&i.PasswordHash,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
   insert into users (
          first_name,
          last_name,
          email,
          password_hash,
          access_level,
          user_active
          )
   values ($1, $2, $3, $4, $5, $6)
returning id
`

type InsertUserParams struct {
	FirstName    string `json:"first_name"`
	LastName     string `json:"last_name"`
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
	AccessLevel  int32  `json:"access_level"`
	UserActive   bool   `json:"user_active"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PasswordHash,
		arg.AccessLevel,
		arg.UserActive,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updatePassword = `-- name: UpdatePassword :exec
   update users
      set password_hash = $1
    where id = $2
`

type UpdatePasswordParams struct {
	PasswordHash string `json:"password_hash"`
	ID           int32  `json:"id"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.PasswordHash, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :one
   update users
      set first_name = $1,
          last_name = $2,
          user_active = $3,
          email = $4,
          access_level = $5,
          updated_at = now()
    where id = $6
returning id, first_name, last_name, user_active, access_level, email, password_hash, deleted_at, created_at, updated_at
`

type UpdateUserParams struct {
	FirstName   string `json:"first_name"`
	LastName    string `json:"last_name"`
	UserActive  bool   `json:"user_active"`
	Email       string `json:"email"`
	AccessLevel int32  `json:"access_level"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.UserActive,
		arg.Email,
		arg.AccessLevel,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.UserActive,
		&i.AccessLevel,
		&i.Email,
		&i.PasswordHash,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
