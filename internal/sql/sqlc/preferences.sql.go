// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: preferences.sql

package sqlc

import (
	"context"
)

const allPreferences = `-- name: AllPreferences :many
   select id,
          name,
          preference
     from preferences
`

type AllPreferencesRow struct {
	ID         int32  `json:"id"`
	Name       string `json:"name"`
	Preference string `json:"preference"`
}

func (q *Queries) AllPreferences(ctx context.Context) ([]AllPreferencesRow, error) {
	rows, err := q.db.QueryContext(ctx, allPreferences)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AllPreferencesRow{}
	for rows.Next() {
		var i AllPreferencesRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Preference); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setSystemPreference = `-- name: SetSystemPreference :exec
do $$
begin

delete from preferences where name = $1;

insert into preferences (
    name, preferences, created_at, updated_at
) values ($1, $2, now(), now());

end;
$$
`

func (q *Queries) SetSystemPreference(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, setSystemPreference)
	return err
}
