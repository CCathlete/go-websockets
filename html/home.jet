<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Home</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.css"
        integrity="sha512-UrjLcAek5jbj1vwGbXkviPHtgSNVNQCedX7cBIMDdSI2iZtUcZcoTh2Sqc8R9mVcijOjFUi1IlxhfrE1uWaIog=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />

    <style>
        .chatbox {
            outline: 1px solid silver;
            min-height: 160px;
            padding: 0.5em;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="row">
            <div class="col">
                <h1 class="mt-3">This is the homepage</h1>

                <hr>

            </div>
        </div>
        <div class="row">
            <div class="col-md-8">
                <h3>Chat</h3>
                <p>
                    <a href="https://github.com">Go to Github</a>
                </p>
                <div class="form-group">
                    <label for="username">Username:</label>
                    <input type="text" name="username" id="username" class="form-control" autocomplete="off">
                </div>
                <div class="form-group">
                    <label for="message">Message:</label>
                    <input type="text" name="message" id="message" class="form-control" autocomplete="off">
                </div>

                <hr>
                <a href="javascript:void(0);" class="btn btn-outline-secondary" id="sendBtn">Send Message</a>

                <hr>
                <input type="hidden" name="action" id="action">

                <div id="output" class="chatbox">

                </div>
            </div>
            <div class="col-md-4">
                <h3>Who's Online</h3>

                <ul id="online_users">

                </ul>
            </div>
        </div>
    </div>
</body>

<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
    integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
    crossorigin="anonymous"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/notie/4.3.1/notie.min.js"
    integrity="sha512-NHRCwRf2LnVSlLDejCA9oS3fG3/FLSQIPCjAWl3M7tVi5wszwr6FxkjotWnQDXLE+aLKcxRrzFDNEgXj9nvkPw=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<script>
    let socket = null;
    let output = document.getElementById("output");
    let userField = document.getElementById("username");
    let messageField = document.getElementById("message");

    window.onbeforeunload = () => {
        console.log("Leaving.");
        let jsonData = {};
        jsonData["action"] = "left";
        socket.send(JSON.stringify(jsonData));
    }

    document.addEventListener("DOMContentLoaded", function () {
        socket = new WebSocket("ws://127.0.0.1:8080/ws");

        socket.onopen = () => {
            console.log("Successfully connected via websocket.");
        }

        socket.onclose = () => {
            console.log("Connection closed.");
        }

        socket.onerror = error => {
            console.log("there was an error: ", error);
        }

        socket.onmessage = msg => {
            // console.log(msg);
            let j = JSON.parse(msg.data);
            console.log("Action is: ", j.action);

            switch (j.action) {
                case "list_users":
                    let ul = document.getElementById("online_users");
                    while (ul.firstChild) {
                        ul.removeChild(ul.firstChild)
                    }

                    if (j.connected_users.length > 0) {
                        // Iterating over each element of connected_users.
                        j.connected_users.forEach(element => {
                            // Creating a list item that would be embedded in the html.
                            let li = document.createElement("li");
                            // Adding the actual content (element) the list item, inside a text box.
                            li.appendChild(document.createTextNode(element));
                            // Adding the list item to the unordered list (ul) "online_users".
                            ul.appendChild(li);
                        });
                    }
                    break;

                case "broadcast":
                    output.innerHTML += j.message + "<br>";
            }
        }

        userField.addEventListener("change", function () {
            let jsonData = {};
            jsonData["action"] = "username";
            jsonData["username"] = this.value;
            socket.send(JSON.stringify(jsonData));
        })

        document.getElementById("message").addEventListener("keydown",
            function (event) {
                if (event.code === "Enter") {
                    if (!socket) {
                        console.log("No connection.");
                        return false;
                    }
                    if ((userField.value === "") || (messageField.value === "")) {
                        errorMessage("Please enter a username and message.");
                        return false;
                    }
                    event.preventDefault();
                    event.stopPropagation();
                    sendMessage();
                }
            })
        document.getElementById("sendBtn").addEventListener("click", function (event) {
            if ((userField.value === "") || (messageField.value === "")) {
                errorMessage("Please enter a username and message.");
                return false;
            }

            sendMessage();
        })
    })

    function sendMessage() {
        let jsonData = {};
        jsonData["action"] = "broadcast";
        jsonData["username"] = userField.value;
        jsonData["message"] = messageField.value;
        socket.send(JSON.stringify(jsonData));
        messageField.value = "";
    }

    function errorMessage(msg) {
        notie.alert(
            {
                type: 'error',
                text: msg,
            }
        )
    };
</script>

</html>